#! create_tfel_check_config_file : this function create a configuration file
#  for tfel-check.
#
# This configuration file declares a component for each interfaces
# selected. For an interface `${interface}` associated with a material property,
# the component `mfm::material_property_interface::${interface}` is declared.
# A similar declaration is performed for interfaces associated with behaviours
# and models.
#
# If a python interpreter is detected, the substitution variable `python`
# is automatically defined and contains the path to the python interpreter.
function(create_tfel_check_config_file)
  set(tfel_check_config_file ${CMAKE_BINARY_DIR}/mfm-tfel-check.config)
  if(EXISTS ${tfel_check_config_file})
    file(REMOVE ${tfel_check_config_file})
  endif(EXISTS ${tfel_check_config_file})
  file(WRITE ${tfel_check_config_file}
       "// file generated by the MFM project\n")
  # list of selected interfaces for material properties
  foreach(interface ${mfront-properties-interfaces})
    file(APPEND ${tfel_check_config_file}
         "components : {\"mfm::material_property_interface::${interface}\"};\n")
  endforeach()
  # list of selected interfaces for behaviours
  foreach(interface ${mfront-behaviours-interfaces})
    file(APPEND ${tfel_check_config_file}
         "components : {\"mfm::behaviour_interface::${interface}\"};\n")
  endforeach()
  # list of selected interfaces for point-wise models
  foreach(interface ${mfront-models-interfaces})
    file(APPEND ${tfel_check_config_file}
         "components : {\"mfm::model_interface::${interface}\"};\n")
  endforeach()
  # add the substitution rule for the python interpreter 
  if(PYTHON_EXECUTABLE)
    file(APPEND ${tfel_check_config_file}
         "components : {\"mfm::python\"};\n")
    file(APPEND ${tfel_check_config_file}
         "substitutions: {\"python\" : \"${PYTHON_EXECUTABLE}\"};\n")
  endif(PYTHON_EXECUTABLE)
endfunction(create_tfel_check_config_file)

create_tfel_check_config_file()

#! tfel-check : this function declares a test based on `tfel-check`
#
# \arg file: base name for the input file passed to `tfel-check`
# A file named ${file}.check or ${file}.check.in must exists in the
# current source directory.
#
# The configuration file `mfm-tfel-check.config`, which is generated
# at the top level directory of the build tree, is automatically
# used. See the `create_tfel_check_config_file` for the components
# and substitution variables declared in this file.
#
# Additional configuration files may be added to
# `mfm-tfel-check-configuration-files` list.
function(tfel_check file)
  set(tfel_check_config_file ${CMAKE_BINARY_DIR}/mfm-tfel-check.config)
  if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${file}.check.in")
    set(check_file "${CMAKE_CURRENT_BINARY_DIR}/${file}.check")
    configure_file(
      "${CMAKE_CURRENT_SOURCE_DIR}/${file}.check.in"
      "${CMAKE_CURRENT_BINARY_DIR}/${file}.check"
      @ONLY)
  else(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${file}.check.in")
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${file}.check")
      if(NOT "${CMAKE_CURRENT_SOURCE_DIR}" STREQUAL "${CMAKE_CURRENT_BINARY_DIR}")
	    configure_file("${CMAKE_CURRENT_SOURCE_DIR}/${file}.check"
                       "${CMAKE_CURRENT_BINARY_DIR}/${file}.check" COPYONLY)
      endif(NOT "${CMAKE_CURRENT_SOURCE_DIR}" STREQUAL "${CMAKE_CURRENT_BINARY_DIR}")
      set(check_file "${CMAKE_CURRENT_BINARY_DIR}/${file}.check")
    else(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${file}.check")
      message(FATAL_ERROR "no check file named "
              "'${file}.check.in' or '${file}.check'")
    endif(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${file}.check")
  endif(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${file}.check.in")
  set(tfel_check_args )
  list(APPEND tfel_check_args "--config=${tfel_check_config_file}")
  foreach(cfile ${mfm-tfel-check-configuration-files})
    list(APPEND tfel_check_args "--config=${cfile}")
  endforeach()
  add_test(NAME ${file}_tfel_check
           COMMAND ${TFEL_CHECK} ${tfel_check_args} ${check_file})
  #  set(tfel_check_clean_files)
  #  list(APPEND tfel_check_clean_files "tfel-check.log")
  #  list(APPEND tfel_check_clean_files "${file}.checklog")
  #  list(APPEND tfel_check_clean_files "TEST-${file}.xml")
  #  set_property(DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
  #               APPEND PROPERTY ADDITIONAL_CLEAN_FILES ${tfel_check_clean_files})
endfunction()