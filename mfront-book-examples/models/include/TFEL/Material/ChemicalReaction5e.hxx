/*!
* \file   TFEL/Material/ChemicalReaction5e.hxx
* \brief  this file implements the ChemicalReaction5e Behaviour.
*         File generated by tfel version 4.1.0-dev
* \author Thomas Helfer
* \date   09 / 07 / 2022
 */

#ifndef LIB_TFELMATERIAL_CHEMICALREACTION5E_HXX
#define LIB_TFELMATERIAL_CHEMICALREACTION5E_HXX

#include<string>
#include<iostream>
#include<limits>
#include<stdexcept>
#include<algorithm>

#include"TFEL/Raise.hxx"
#include"TFEL/PhysicalConstants.hxx"
#include"TFEL/Config/TFELConfig.hxx"
#include"TFEL/Config/TFELTypes.hxx"
#include"TFEL/TypeTraits/IsFundamentalNumericType.hxx"
#include"TFEL/TypeTraits/IsReal.hxx"
#include"TFEL/Math/General/IEEE754.hxx"
#include"TFEL/Material/MaterialException.hxx"
#include"TFEL/Material/MechanicalBehaviour.hxx"
#include"TFEL/Material/MechanicalBehaviourTraits.hxx"
#include"TFEL/Material/OutOfBoundsPolicy.hxx"
#include"TFEL/Material/BoundsCheck.hxx"
#include"TFEL/Material/IsotropicPlasticity.hxx"
#include"TFEL/Material/Lame.hxx"
#include"TFEL/Material/Hosford1972YieldCriterion.hxx"
#include"TFEL/Material/ChemicalReaction5eBehaviourData.hxx"
#include"TFEL/Material/ChemicalReaction5eIntegrationData.hxx"

#include "MFront/GenericBehaviour/State.hxx"
#include "MFront/GenericBehaviour/BehaviourData.hxx"
namespace tfel::material{

struct ChemicalReaction5eParametersInitializer
{
static ChemicalReaction5eParametersInitializer&
get();

double k01;
double k02;
double Ta1;
double Ta2;
double minimal_time_step_scaling_factor;
double maximal_time_step_scaling_factor;

void set(const char* const,const double);

/*!
 * \brief convert a string to double
 * \param[in] p : parameter
 * \param[in] v : value
 */
static double getDouble(const std::string&,const std::string&);
private :

ChemicalReaction5eParametersInitializer();

ChemicalReaction5eParametersInitializer(const ChemicalReaction5eParametersInitializer&);

ChemicalReaction5eParametersInitializer&
operator=(const ChemicalReaction5eParametersInitializer&);
/*!
 * \brief read the parameters from the given file
 * \param[out] pi : parameters initializer
 * \param[in]  fn : file name
 */
static void readParameters(ChemicalReaction5eParametersInitializer&,const char* const);
};

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis, typename NumericType, bool use_qt>
struct ChemicalReaction5e;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType, bool use_qt>
std::ostream&
 operator <<(std::ostream&,const ChemicalReaction5e<hypothesis, NumericType, use_qt>&);

/*!
* \class ChemicalReaction5e
* \brief This class implements the ChemicalReaction5e behaviour.
* \tparam hypothesis: modelling hypothesis.
* \tparam NumericType: numerical type.
* \tparam use_qt: conditional saying if quantities are use.
* \author Thomas Helfer
* \date   09 / 07 / 2022
*/
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType, bool use_qt>
struct ChemicalReaction5e final
: public MechanicalBehaviour<MechanicalBehaviourBase::GENERALBEHAVIOUR,hypothesis, NumericType, use_qt>,
public ChemicalReaction5eBehaviourData<hypothesis, NumericType, use_qt>,
public ChemicalReaction5eIntegrationData<hypothesis, NumericType, use_qt>
{

static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;

static_assert(N==1||N==2||N==3);
static_assert(tfel::typetraits::IsFundamentalNumericType<NumericType>::cond);
static_assert(tfel::typetraits::IsReal<NumericType>::cond);

friend std::ostream& operator<< <>(std::ostream&,const ChemicalReaction5e&);

static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;

using ushort =  unsigned short;
using Types = tfel::config::Types<N, NumericType, use_qt>;
using Type = NumericType;
using numeric_type = typename Types::numeric_type;
using real = typename Types::real;
using time = typename Types::time;
using length = typename Types::length;
using frequency = typename Types::frequency;
using speed = typename Types::speed;
using stress = typename Types::stress;
using strain = typename Types::strain;
using strainrate = typename Types::strainrate;
using stressrate = typename Types::stressrate;
using temperature = typename Types::temperature;
using thermalexpansion = typename Types::thermalexpansion;
using thermalconductivity = typename Types::thermalconductivity;
using massdensity = typename Types::massdensity;
using energydensity = typename Types::energydensity;
using TVector = typename Types::TVector;
using DisplacementTVector = typename Types::DisplacementTVector;
using ForceTVector = typename Types::ForceTVector;
using HeatFlux = typename Types::HeatFlux;
using TemperatureGradient = typename Types::TemperatureGradient;
using Stensor = typename Types::Stensor;
using StressStensor = typename Types::StressStensor;
using StressRateStensor = typename Types::StressRateStensor;
using StrainStensor = typename Types::StrainStensor;
using StrainRateStensor = typename Types::StrainRateStensor;
using FrequencyStensor = typename Types::FrequencyStensor;
using Tensor = typename Types::Tensor;
using DeformationGradientTensor = typename Types::DeformationGradientTensor;
using DeformationGradientRateTensor = typename Types::DeformationGradientRateTensor;
using StressTensor = typename Types::StressTensor;
using StiffnessTensor = typename Types::StiffnessTensor;
using Stensor4 = typename Types::Stensor4;
using TangentOperator = tfel::math::tvector<(1)*(1)+(1)*(1),real>;
using PhysicalConstants = tfel::PhysicalConstants<NumericType, use_qt>;

public :

typedef ChemicalReaction5eBehaviourData<hypothesis, NumericType, use_qt> BehaviourData;
typedef ChemicalReaction5eIntegrationData<hypothesis, NumericType, use_qt> IntegrationData;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::GENERALBEHAVIOUR,hypothesis, NumericType, use_qt>::SMFlag SMFlag;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::GENERALBEHAVIOUR,hypothesis, NumericType, use_qt>::SMType SMType;
using MechanicalBehaviour<MechanicalBehaviourBase::GENERALBEHAVIOUR,hypothesis, NumericType, use_qt>::ELASTIC;
using MechanicalBehaviour<MechanicalBehaviourBase::GENERALBEHAVIOUR,hypothesis, NumericType, use_qt>::SECANTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::GENERALBEHAVIOUR,hypothesis, NumericType, use_qt>::TANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::GENERALBEHAVIOUR,hypothesis, NumericType, use_qt>::CONSISTENTTANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::GENERALBEHAVIOUR,hypothesis, NumericType, use_qt>::NOSTIFFNESSREQUESTED;
using IntegrationResult = typename MechanicalBehaviour<MechanicalBehaviourBase::GENERALBEHAVIOUR,hypothesis, NumericType, use_qt>::IntegrationResult;

using MechanicalBehaviour<MechanicalBehaviourBase::GENERALBEHAVIOUR,hypothesis, NumericType, use_qt>::SUCCESS;
using MechanicalBehaviour<MechanicalBehaviourBase::GENERALBEHAVIOUR,hypothesis, NumericType, use_qt>::FAILURE;
using MechanicalBehaviour<MechanicalBehaviourBase::GENERALBEHAVIOUR,hypothesis, NumericType, use_qt>::UNRELIABLE_RESULTS;

private :





#line 2 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
frequency k01;
#line 5 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
frequency k02;
#line 8 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
temperature Ta1;
#line 11 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
temperature Ta2;
time minimal_time_step_scaling_factor;
time maximal_time_step_scaling_factor;

//! Tangent operator;
TangentOperator Dt;
typename tfel::math::MakeQuantityReferenceType<tfel::math::derivative_type<tfel::math::quantity<numeric_type,0,0,0,0,0,0,1>,temperature>>::type dca_ddT;
typename tfel::math::MakeQuantityReferenceType<tfel::math::derivative_type<tfel::math::quantity<numeric_type,0,0,0,0,0,0,1>,temperature>>::type dcb_ddT;
/*!
* \brief Update internal variables at end of integration
*/
void updateIntegrationVariables()
{}

/*!
* \brief Update internal variables at end of integration
*/
void updateStateVariables()
{}

/*!
* \brief Update auxiliary state variables at end of integration
*/
void updateAuxiliaryStateVariables()
{}

//! \brief Default constructor (disabled)
ChemicalReaction5e() =delete ;
//! \brief Copy constructor (disabled)
ChemicalReaction5e(const ChemicalReaction5e&) = delete;
//! \brief Assignement operator (disabled)
ChemicalReaction5e& operator = (const ChemicalReaction5e&) = delete;

public:

/*!
* \brief Constructor
*/
ChemicalReaction5e(const ChemicalReaction5eBehaviourData<hypothesis, NumericType, use_qt>& src1,
const ChemicalReaction5eIntegrationData<hypothesis, NumericType, use_qt>& src2)
: ChemicalReaction5eBehaviourData<hypothesis, NumericType, use_qt>(src1),
ChemicalReaction5eIntegrationData<hypothesis, NumericType, use_qt>(src2),
dca_ddT(Dt[0]),
dcb_ddT(Dt[1])
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->k01 = frequency(ChemicalReaction5eParametersInitializer::get().k01);
this->k02 = frequency(ChemicalReaction5eParametersInitializer::get().k02);
this->Ta1 = temperature(ChemicalReaction5eParametersInitializer::get().Ta1);
this->Ta2 = temperature(ChemicalReaction5eParametersInitializer::get().Ta2);
this->minimal_time_step_scaling_factor = time(ChemicalReaction5eParametersInitializer::get().minimal_time_step_scaling_factor);
this->maximal_time_step_scaling_factor = time(ChemicalReaction5eParametersInitializer::get().maximal_time_step_scaling_factor);
}

/*
 * \brief constructor for the Generic interface
 * \param[in] mgb_d: behaviour data
 */
ChemicalReaction5e(const mfront::gb::BehaviourData& mgb_d)
: ChemicalReaction5eBehaviourData<hypothesis, NumericType, use_qt>(mgb_d),
ChemicalReaction5eIntegrationData<hypothesis, NumericType, use_qt>(mgb_d),
dca_ddT(Dt[0]),
dcb_ddT(Dt[1])
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->k01 = frequency(ChemicalReaction5eParametersInitializer::get().k01);
this->k02 = frequency(ChemicalReaction5eParametersInitializer::get().k02);
this->Ta1 = temperature(ChemicalReaction5eParametersInitializer::get().Ta1);
this->Ta2 = temperature(ChemicalReaction5eParametersInitializer::get().Ta2);
this->minimal_time_step_scaling_factor = time(ChemicalReaction5eParametersInitializer::get().minimal_time_step_scaling_factor);
this->maximal_time_step_scaling_factor = time(ChemicalReaction5eParametersInitializer::get().maximal_time_step_scaling_factor);
}

/*!
 * \ brief initialize the behaviour with user code
 */
void initialize(){
using namespace std;
using namespace tfel::math;
using std::vector;
}

/*!
 * \brief set the policy for "out of bounds" conditions
 */
void
setOutOfBoundsPolicy(const OutOfBoundsPolicy policy_value){
  this->policy = policy_value;
} // end of setOutOfBoundsPolicy

/*!
* \return the modelling hypothesis
*/
constexpr ModellingHypothesis::Hypothesis
getModellingHypothesis() const{
return hypothesis;
} // end of getModellingHypothesis

//! \brief check physical bounds and standard bounds
void checkBounds() const{
tfel::material::BoundsCheck<N>::lowerBoundCheck("T", this->T,static_cast<temperature>(0));
tfel::material::BoundsCheck<N>::lowerBoundCheck("T+dT", this->T+this->dT,static_cast<temperature>(0));
} // end of checkBounds

IntegrationResult computePredictionOperator(const SMFlag,const SMType) override{
tfel::raise("ChemicalReaction5e::computePredictionOperator: "
"unsupported prediction operator flag");
}

time getMinimalTimeStepScalingFactor() const noexcept override{
  return this->minimal_time_step_scaling_factor;
}

std::pair<bool, time>
computeAPrioriTimeStepScalingFactor(const time current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPrioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                  current_time_step_scaling_factor)};
}

/*!
* \brief Integrate behaviour  over the time step
*/
IntegrationResult
integrate(const SMFlag smflag, const SMType smt) override{
using namespace std;
using namespace tfel::math;
raise_if(smflag!=MechanicalBehaviour<MechanicalBehaviourBase::GENERALBEHAVIOUR,hypothesis, NumericType, use_qt>::STANDARDTANGENTOPERATOR,
"invalid tangent operator flag");
bool computeTangentOperator_ = smt!=NOSTIFFNESSREQUESTED;
#line 21 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
const auto ca_bts = this->ca;
#line 22 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
const auto cb_bts = this->cb;
#line 23 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
const auto sum = ca_bts + cb_bts;
#line 24 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
const auto T_mts = this->T + this->dT / 2;
#line 25 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
const auto k1_mts = this->k01 * exp(-T_mts / this->Ta1);
#line 26 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
const auto k2_mts = this->k02 * exp(-T_mts / this->Ta2);
#line 27 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
const auto B = k2_mts * sum;
#line 28 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
const auto K = k1_mts + k2_mts;
#line 29 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
const auto e = exp(-K * this->dt);
#line 30 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
this->ca = ca_bts * e + (B / K) * (1 - e);
#line 31 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
this->cb = sum - this->ca;
#line 32 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
if (computeTangentOperator_) {
#line 33 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
const auto dk1_mts_ddT = -k1_mts / (2 * this->Ta1);
#line 34 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
const auto dk2_mts_ddT = -k2_mts / (2 * this->Ta2);
#line 35 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
const auto dB_ddT = sum * dk2_mts_ddT;
#line 36 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
const auto dK_ddT = dk1_mts_ddT + dk2_mts_ddT;
#line 37 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
const auto de_ddT = -this->dt * e * dK_ddT;
#line 38 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
dca_ddT = ca_bts * de_ddT - (B / K) * de_ddT +
#line 39 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
((1 - e) / K) * (dB_ddT - B * dK_ddT / K);
#line 40 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
dcb_ddT = -dca_ddT;
#line 41 "/home/th202608/Documents/Books/MFrontBook/examples/models/ChemicalReaction5e.mfront"
}
this->updateIntegrationVariables();
this->updateStateVariables();
this->updateAuxiliaryStateVariables();
return MechanicalBehaviour<MechanicalBehaviourBase::GENERALBEHAVIOUR,hypothesis, NumericType, use_qt>::SUCCESS;
}

std::pair<bool, time>
computeAPosterioriTimeStepScalingFactor(const time current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPosterioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                 current_time_step_scaling_factor)};
}

/*!
* \brief Update the internal energy at end of the time step
* \param[in] Psi_s: internal energy at end of the time step
*/
void computeInternalEnergy(stress& Psi_s) const
{
Psi_s=stress{0};
}

/*!
* \brief Update the dissipated energy at end of the time step
* \param[in] Psi_d: dissipated energy at end of the time step
*/
void computeDissipatedEnergy(stress& Psi_d) const
{
Psi_d=stress{0};
}

/*!
* \brief compute the sound velocity
* \param[in] rho_m0: mass density in the reference configuration
*/
speed computeSpeedOfSound(const massdensity&) const {
return speed(0);

}

const TangentOperator& getTangentOperator() const{
return this->Dt;
}

void updateExternalStateVariables(){
this->T += this->dT;
}

//!
~ChemicalReaction5e()
 override = default;

private:

std::pair<bool, time> computeAPrioriTimeStepScalingFactorII() const{
return {true, this->maximal_time_step_scaling_factor};
}

std::pair<bool, time> computeAPosterioriTimeStepScalingFactorII() const{
return {true,this->maximal_time_step_scaling_factor};
}

//! policy for treating out of bounds conditions
OutOfBoundsPolicy policy = tfel::material::None;

}; // end of ChemicalReaction5e class

template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType, bool use_qt>
std::ostream&
operator <<(std::ostream& os,const ChemicalReaction5e<hypothesis, NumericType, use_qt>& b)
{
os << "Δt : " << b.dt << '\n';
os << "ca : " << b.ca << '\n';
os << "cb : " << b.cb << '\n';
os << "T : " << b.T << '\n';
os << "ΔT : " << b.dT << '\n';
os << "k01 : " << b.k01 << '\n';
os << "k02 : " << b.k02 << '\n';
os << "Ta1 : " << b.Ta1 << '\n';
os << "Ta2 : " << b.Ta2 << '\n';
os << "minimal_time_step_scaling_factor : " << b.minimal_time_step_scaling_factor << '\n';
os << "maximal_time_step_scaling_factor : " << b.maximal_time_step_scaling_factor << '\n';
return os;
}

/*!
* Partial specialisation for ChemicalReaction5e.
*/
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType,bool use_qt>
class MechanicalBehaviourTraits<ChemicalReaction5e<hypothesis, NumericType, use_qt> >
{
using size_type = unsigned short;
static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;
static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;
public:
static constexpr bool is_defined = true;
static constexpr bool use_quantities = use_qt;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = N;
static constexpr size_type material_properties_nb = 0;
static constexpr size_type internal_variables_nb  = 2;
static constexpr size_type external_variables_nb  = 1;
static constexpr size_type external_variables_nb2 = 0;
static constexpr bool hasConsistentTangentOperator = true;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = false;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "ChemicalReaction5e";
}

};

/*!
* Partial specialisation for ChemicalReaction5e.
*/
template<typename NumericType,bool use_qt>
class MechanicalBehaviourTraits<ChemicalReaction5e<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS, NumericType, use_qt> >
{
using size_type = unsigned short;
public:
static constexpr bool is_defined = false;
static constexpr bool use_quantities = use_qt;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = 0u;
static constexpr size_type material_properties_nb = 0;
static constexpr size_type internal_variables_nb  = 0;
static constexpr size_type external_variables_nb  = 0;
static constexpr size_type external_variables_nb2 = 0;
static constexpr bool hasConsistentTangentOperator = false;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = false;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "ChemicalReaction5e";
}

};

/*!
* Partial specialisation for ChemicalReaction5e.
*/
template<typename NumericType,bool use_qt>
class MechanicalBehaviourTraits<ChemicalReaction5e<ModellingHypothesis::PLANESTRESS, NumericType, use_qt> >
{
using size_type = unsigned short;
public:
static constexpr bool is_defined = false;
static constexpr bool use_quantities = use_qt;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = 0u;
static constexpr size_type material_properties_nb = 0;
static constexpr size_type internal_variables_nb  = 0;
static constexpr size_type external_variables_nb  = 0;
static constexpr size_type external_variables_nb2 = 0;
static constexpr bool hasConsistentTangentOperator = false;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = false;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "ChemicalReaction5e";
}

};

} // end of namespace tfel::material

#endif /* LIB_TFELMATERIAL_CHEMICALREACTION5E_HXX */
