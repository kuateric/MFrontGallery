/*!
* \file   ChemicalReaction5d.cxx
* \brief  this file implements the ChemicalReaction5d Behaviour.
*         File generated by tfel version 4.1.0-dev
* \author Thomas Helfer
* \date   09 / 07 / 2022
 */

#include<string>
#include<cstring>
#include<sstream>
#include<fstream>
#include<stdexcept>

#include"TFEL/Raise.hxx"
#include"TFEL/Material/ChemicalReaction5dBehaviourData.hxx"
#include"TFEL/Material/ChemicalReaction5dIntegrationData.hxx"
#include"TFEL/Material/ChemicalReaction5d.hxx"

namespace tfel::material{

ChemicalReaction5dParametersInitializer&
ChemicalReaction5dParametersInitializer::get()
{
static ChemicalReaction5dParametersInitializer i;
return i;
}

ChemicalReaction5dParametersInitializer::ChemicalReaction5dParametersInitializer()
{
this->k01 = 0.01837750538756;
this->k02 = 0.010131981128094;
this->Ta1 = 3000;
this->Ta2 = 1500;
this->minimal_time_step_scaling_factor = 0.1;
this->maximal_time_step_scaling_factor = 1.7976931348623e+308;
// Reading parameters from a file
ChemicalReaction5dParametersInitializer::readParameters(*this,"ChemicalReaction5d-parameters.txt");
}

void
ChemicalReaction5dParametersInitializer::set(const char* const key,
const double v){
using namespace std;
if(::strcmp("ReferenceReactionRateCoefficientAB",key)==0){
this->k01 = v;
} else if(::strcmp("ReferenceReactionRateCoefficientBA",key)==0){
this->k02 = v;
} else if(::strcmp("ActivationTemperatureAB",key)==0){
this->Ta1 = v;
} else if(::strcmp("ActivationTemperatureBA",key)==0){
this->Ta2 = v;
} else if(::strcmp("minimal_time_step_scaling_factor",key)==0){
this->minimal_time_step_scaling_factor = v;
} else if(::strcmp("maximal_time_step_scaling_factor",key)==0){
this->maximal_time_step_scaling_factor = v;
} else {
tfel::raise("ChemicalReaction5dParametersInitializer::set: "
" no parameter named '"+std::string(key)+"'");
}
}

double
ChemicalReaction5dParametersInitializer::getDouble(const std::string& n,
const std::string& v)
{
double value;
std::istringstream converter(v);
converter >> value;
tfel::raise_if(!converter||(!converter.eof()),
"ChemicalReaction5dParametersInitializer::getDouble: "
"can't convert '"+v+"' to double for parameter '"+ n+"'");
return value;
}

void
ChemicalReaction5dParametersInitializer::readParameters(ChemicalReaction5dParametersInitializer& pi,const char* const fn){
auto tokenize = [](const std::string& line){
std::istringstream tokenizer(line);
std::vector<std::string> tokens;
std::copy(std::istream_iterator<std::string>(tokenizer),
std::istream_iterator<std::string>(),
std::back_inserter(tokens));
return tokens;
};
std::ifstream f(fn);
if(!f){
return;
}
size_t ln = 1u;
auto line = std::string{};
while(std::getline(f,line)){
auto tokens = tokenize(line);
auto throw_if = [ln = ln, line, fn](const bool mfront_c,
const std::string& mfront_error_message){
tfel::raise_if(mfront_c,"ChemicalReaction5dParametersInitializer::readParameters: "
"error at line '"+std::to_string(ln)+"' "
"while reading parameter file '"+std::string(fn)+"'"
"("+mfront_error_message+")");
};
if(tokens.empty()){
continue;
}
if(tokens[0][0]=='#'){
continue;
}
throw_if(tokens.size()!=2u,"invalid number of tokens");
if("ReferenceReactionRateCoefficientAB"==tokens[0]){
pi.k01 = ChemicalReaction5dParametersInitializer::getDouble(tokens[0],tokens[1]);
} else if("ReferenceReactionRateCoefficientBA"==tokens[0]){
pi.k02 = ChemicalReaction5dParametersInitializer::getDouble(tokens[0],tokens[1]);
} else if("ActivationTemperatureAB"==tokens[0]){
pi.Ta1 = ChemicalReaction5dParametersInitializer::getDouble(tokens[0],tokens[1]);
} else if("ActivationTemperatureBA"==tokens[0]){
pi.Ta2 = ChemicalReaction5dParametersInitializer::getDouble(tokens[0],tokens[1]);
} else if("minimal_time_step_scaling_factor"==tokens[0]){
pi.minimal_time_step_scaling_factor = ChemicalReaction5dParametersInitializer::getDouble(tokens[0],tokens[1]);
} else if("maximal_time_step_scaling_factor"==tokens[0]){
pi.maximal_time_step_scaling_factor = ChemicalReaction5dParametersInitializer::getDouble(tokens[0],tokens[1]);
} else {
throw_if(true,"invalid parameter '"+tokens[0]+"'");
}
}
}

} // end of namespace tfel::material

